Interactive Vim tutorial = VIM互动教程
Tutorial = Tutorial
Practice = Practice
Development = 开发
Introduction = 介绍
Sections = 目录
Toggle = Toggle

sandbox_intro1 = Here you can practice Vim with context-aware help menu. 
sandbox_intro2 = e.g. if you press 'd', you see that the list on the right changes: it will show (some of the) Vim command combinations that start with 'd'.


I am an interactive |Vim| tutorial. = 我是一份交互式的VIM指南
Hello = Hello
I'll teach you what Vim is about without hassle. If you are in a hurry, press any key to fast forward. = PS:按任意键可以快进。
To practice what you've learned, try out the |practice| page. It has a context sensitive reference for commands. = 如果你想直接练习VIM，可以点击|练习|页面。
Now, let me introduce you to basics of Vim. = 现在我将介绍一些VIM的基本操作。

Two modes, insert and normal = 插入模式和普通模式
Vim has two basic modes. One is |insert| mode, in which you write text as if in normal text editor. = VIM有很多种编辑模式，这里先介绍两种，一个是插入|Insert|模式，插入模式下就和普通编辑器编辑时一样
Another is |normal| mode which provides you efficient ways to navigate and manipulate text. = 另一个是普通|Normal|模式，可以提供一些特殊的操作。
At any time, you can see which mode you are in on the status bar which is located at the top of the editor. = 在任何时候你都可以在编辑器的状态栏里看到当前的编辑模式
To change between modes, use |Esc| for normal mode and |i| for insert mode = 普通模式下按|i|键进入编辑模式，编辑模式下按|ESC|进入普通模式。
Let's try it out! First, change to insert mode.= 来，让我们试一下，切换到插入模式。
Good, now you're in insert mode. Write something and change back to normal mode. = 现在你在插入模式了，写点东西试试
Good. Let's move on to another section. = 干的漂亮，现在到下一节

Basic movement: h, j, k, and l = 基本的移动操作 (h, j, k, l)
In contrast to regular text editor, you use keys |h|, |j|, |k|, and |l| instead of arrow keys to move the cursor. = 与普通编辑器不一样，VIM建议使用|h|,|j|,|k|,|l|按键来移动光标
Let's see how it works in practice! = 来看看实际使用如何
Let's move on. = OK，下一节

Word movement: w, e, b = 单词移动
To navigate the text in terms of words, you can use keys |w|, |b|, and |e| (also W, B, E in real Vim). = 可以使用|w|,|b|,|e|在单词之间移动光标（真正的VIM里也可以使用W,B,E）
|w| moves to the start of next word; |e| moves to the end of the word; and |b| moves to beginning of the word. = |w|移动到下一个单词的开头，|e|移动到一个单词的末尾(end)，|b|移动到一个单词的开头(begin).PS:当然中文就是整句的移动了。
Word! Let's move on. = 单词间移动就到这里了，下一节

Number powered movement, e.g. 5w = 利用数字移动,如:5w
Moving within the text is not limited to individual keys; you can combine movement keys with a |number|. For example, |3w| is the same as pressing w three times. = 在文本中移动并不限于单个的按键，也可以带上数字形成组合键，比如|3w|就等同于按|w|三次。
With numbers, ain't no numbness. = 带上数字，任何位置都可以轻松移动过去了

Insert text repeatedly, e.g. 3iYes = 输入重复的文本,如:3iYes
You can insert text multiple times. = 你可以简单的重复输入一段文本
For example, an underline of a header might consist of 30 |-|s. = 例如，输入一条大概30个|-|的横线
With |30i-| |Esc|, there's no need to press |-| 30 times. = 通过输入|30i-| 然后|ESC|就可以了
Let's try it out: insert |go| three times. = 试试看
See? 10iAll work is only play Esc. = 看，只要输入ESC就出来了

Find a character, f and F = 利用F或者f查找
To find and move to the next (or previous) occurrence of a character, use |f| and |F|, e.g. |fo| finds next o. = f用来查找字符，同时也用于移动到匹配查找的下一个字符，F则是上一个
You can combine f with a number. For example, you can find 3rd occurrence of 'q' with |3fq|, que? = 查找也可以和数字键组合，例如要查找第三个'q',则可以使用|3fq|
F-f-f-ast! = F-f-f-ast!

Go to matching parentheses, ％= 用％匹配括号
In text that is structured with parentheses or brackets, |(| or |{| or |[|, use |％| to jump to the matching parenthesis or bracket. = 文本中经常会出现括号 |(| |[| |{|, ％用来跳转到相匹配的括号.
Here is (a sample) text to try that. = 这用一个(简单)的例子来试试

Go to start/end of line, 0 and $ = 0/$移动到行首/行尾
To reach the beginning of a line, press |0|. = |0|移动到行首
For the end of a line, there's |$| = |$|移动到行尾

Find word under cursor, * and # = 使用*和#查找光标所在的字符
Find the next occurrence of the word under cursor with |*|, and the previous with |#|. = *和#查找和光标所在的字符相同的单词, *是当前位置之后的, #是之前的
Nothing new under the cursor. = 这节就这些了，进入下节吧

Goto line, g and G = 使用g和G在行之间移动
|gg| takes you to the beginning of the file; |G| to the end. = |gg|可以将光标移动到文件开头，|G|则可以移动到结尾
To jump directly to a specific line, give its |line number| along with |G|. = 需要直接到某一行则使用 行号+G的方式
Now go to the beginning of this screen with |gg| and then back to end with |G|. = 现在使用gg移动到屏幕第一行，G到最后一行

Go to line 2 with 2G. = 使用 2G 移动到第二行
gg! G majorly rocks. = gg(Good Game), 去下一节吧

Search, /text with n and N = 使用 /XX 和N和n在文中搜索
Searching text is a vital part of any text editor. In Vim, you press |/|, and give the text you are looking for. = 搜索文本的在任何编辑器中都是一个很重要的功能, 在VIM中你可以这样搜索, 先按下|/|, 然后输入你要搜索的文本。
You can repeat the search for next and previous occurrences with |n| and |N|, respectively. = 然后按n移动下一个匹配目标，或者N移动到上一个
For advanced use cases, it's possible to use regexps that help to find text of particular form (In real Vim). = 如果有更复杂的搜索要求可以使用正则表达式来匹配文本
Let's try a simple text search. = 来我们试下简单的搜索
Search for |text| and find the subsequent matches with |n|. = 搜索text并且使用n向后查找

Slash through the needless with /n/e/e/d/l/e/s = 

Insert new line, o and O = o和O用于插入新行
To insert text into a new line, press |o| or |O|= 普通模式下按下o或者O可以新插入一行, 并切换至插入模式
After new line is created, the editor is set to |insert| mode. = 按o在当前行下插入新行, O则在当前行之上
Write a bit and get back to |normal| mode. = 试着插入新行写点东西，然后返回普通模式
Yep! Now big O to insert new line above the current line. = 现在按O在上面插入一行
I bet you feel like O___o = o,O是不是好用极了O___o

Removing a character, x and X = x, X:删除一个字符
|x| and |X| delete the character under the cursor and to the left of the cursor, respectively = x用于删除光标所在的位置的字符, X则删除光标之前的一个字符
Try pressing |x| to remove the last word. = 试着用x删除掉最后一个字符
Sometimes the treasure is the indicator (x). = 

Replacing letter under cursor, r = r: 替换光标处的字符
When you need to replace only one character under your cursor, without changing to insert mode, use |r|. = 当你需要替换光标处的一个字符的时候，你不需要进入插入模式，直接使用r就可以了
Replace my = 替换my

Deleting, d = d: 删除
|d| is the delete command = d是一个删除(delete)命令
You can combine it with movement, e.g. |dw| deletes the first word on the right side of the cursor = 你可以使用dw删除光标所在的单词
It also copies the content, so that you can paste it with |p| to another location (on real Vim). = 这个删除操作同时也复制了被删除的文本, 所以你也可以使用来粘贴
The word is gone. Now let's remove two words with d2e. = 这个单词删掉了，我们在删除两个单词，用d2e
To 'de' or not to 'de', is not the question, anymore. = 删除或者不删除, 这不是一个问题

Repetition with . = .: 使用上一条命令
To repeat the previous command, just press |.| = .用来重复使用上一次使用过的命令
First, remove two words with |d2w|. = 首先, 使用d2w删除两个单词
After that, remove the rest of the words in this line with |.| = 然后, 使用.删除剩下的
Repetition is the root of all periods. = 123

Visual mode, v = v: 视图模式
Besides insert and normal mode, Vim has also |visual| mode. = 除了插入模式和普通模式之外, VIM还有视图模式
In visual mode, you select text using movement keys before you decide what to do with it. = 在视图模式中,你可以选中文本用来做其他操作
Let's see how. Goto visual mode with |v|. Then select a word with |e|. After you've selected the text, you can delete it with |d|. = 我们来试试看,
使用v进入视图模式,然后用e选中一个单词,再用d删除它
This sentence has not seen the light. = 123
(Visually gifted, I lost my words.) = 123

Real Vim awaits = 准备进入真实VIM环境
Now you should be quite confident to enter the real Vim. = 你现在已经基本可以使用VIM做日常的编辑了.
Most important commands to remember are |:w| (save), |:q| (quit), and |:q!| (quit without saving). = VIM的保存文件使用|:w|,退出使用|:q|,|:q!|用于强制退出
Also don't |PANIC!| If you make a mistake, press |u| for undo and |ctrl+R| for redo = 不要担心,万一失误了可以使用|:u|撤销,也可以使用|ctrl+r|恢复撤销
If you have a problem, or want to learn more about what Vim offers, type |:help| = 如果有问题或者了解更详细的操作可以使用|:help|

The end = 小结
Thank you for your time. = 感谢浏览
This tutorial is still in progress; minor changes might occur daily. I am also developing other features/concepts. = 这个指南还在开发中
Feel encouraged to send greetings or feedback to: henrik|.|huttunen|@|gmail|.|com = 如果你感觉不错或者有好的建议, 欢迎联系|I@laily.net|


Interactive Vim tutorial - sandbox = 虚拟VIM环境
sandbox_intro1 = 在这里你可以边练习VIM边查看提示 
sandbox_intro2 = 例如:你按下'd',右侧就会列出包含'd'的VIM命令提示
Context-Aware Actions = 操作提示

change to normal mode = 切换到普通模式
change to insert mode = 切换到插入模式
move left, down, up, right = 向左,下,上,右移动光标
move word at a time = 单词之间移动
do n times, e.g. 3w = 操作n次,如3w
remove a character = 删除一个字符
append = 追加
move to next given char in line = 移动到下一个符合匹配的词
move to previous char in line = 移动到上一个符合匹配的词
repeat last f or F = 重复上一次f后者F(?)
move to n:th next given char in line = 移动到下n个符合匹配的词
Search text = 搜索文本
delete by giving movement = 通过给的参数删除
replaces character below cursor = 替换光标所在的字符
move to start/end of line = 移动到行首或者行尾
add new line = 新增一行
Goto corresponding parentheses = 移动到对应的括号
Goto next/previous parentheses = 移动到下一个/
change inside of given movement = change inside of given movement 
delete to end of line = 删除从当前位置到行末的内容
clear current line; to insert mode = clear current line; to insert mode 
move to the start of buffer ＝移动到文件开头 
move to end of previous word", "ge");
G", "move to start / end of buffer");
[number]G", "move to line", "goto_line_g");
the whole line", "dd");
the rest of the line", "end_of_line");
the beginning of line to here", "start_of_line");
to the beginning of next word", "w");
to the end of current word", "e");
to the beginning of current word", "b");
 k, l", "left, down, up, right", "hjkl");
[movement]", "movement n times", "num_movement");
ar]", "single character", "char");
vement]", "movement, e.g. j", "movement");
, "copy current line");
 "copy current line", "copy_line");
 "Paste copied text after cursor.");
ourText]", "Repeats inserted text", "repeat_insert");
", "cancel action/movement", "chained"); 

